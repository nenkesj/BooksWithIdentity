// <auto-generated />
using System;
using HowTo_DBLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HowTo_DBLibrary.Migrations
{
    [DbContext(typeof(HowToDBContext))]
    [Migration("20240509054717_alter_Owner_In_Nodes_Again")]
    partial class alter_Owner_In_Nodes_Again
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HowTo_DBLibrary.Attempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttemptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"), 1L, 1);

                    b.Property<string>("Attempt1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Attempt")
                        .HasDefaultValueSql("(' ')");

                    b.Property<DateTime>("CompletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('January 1, 1753')");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<bool?>("Succeeded")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.HasKey("AttemptId");

                    b.HasIndex("TaskId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"), 1L, 1);

                    b.Property<string>("Code1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("Code")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("CodeId");

                    b.HasIndex("NodeId");

                    b.ToTable("Code", (string)null);
                });

            modelBuilder.Entity("HowTo_DBLibrary.HowTo", b =>
                {
                    b.Property<int>("HowToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HowToID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HowToId"), 1L, 1);

                    b.Property<string>("Client")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.HasKey("HowToId");

                    b.HasIndex("NodeId");

                    b.ToTable("HowTo", (string)null);
                });

            modelBuilder.Entity("HowTo_DBLibrary.Info", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfoId"), 1L, 1);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("InfoText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<short>("TreeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TreeID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("InfoId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TreeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Info", (string)null);
                });

            modelBuilder.Entity("HowTo_DBLibrary.Key", b =>
                {
                    b.Property<int>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<short>("TreeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TreeID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("KeyId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TreeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NodeId"), 1L, 1);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("NodeText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentNodeId")
                        .HasColumnType("int")
                        .HasColumnName("ParentNodeID");

                    b.Property<short>("TreeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TreeID");

                    b.Property<short>("TreeLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("NodeId");

                    b.HasIndex("TreeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Note", b =>
                {
                    b.Property<string>("Details")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.HasIndex("NodeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Observation", b =>
                {
                    b.Property<int>("ObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObservationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObservationId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Observation1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Observation")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int")
                        .HasColumnName("ProblemID");

                    b.HasKey("ObservationId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PictureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"), 1L, 1);

                    b.Property<short>("DisplayAt")
                        .HasColumnType("smallint");

                    b.Property<short>("DisplayStopAt")
                        .HasColumnType("smallint");

                    b.Property<int>("InfoId")
                        .HasColumnType("int")
                        .HasColumnName("InfoID");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<string>("Picture1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Picture");

                    b.Property<int>("PictureSize")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("PictureId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProblemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"), 1L, 1);

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Impacts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Lpar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<DateTime>("Occurred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('January 1, 1753')");

                    b.Property<int>("ProblemNo")
                        .HasColumnType("int");

                    b.Property<string>("ProblemSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.HasKey("ProblemId");

                    b.HasIndex("NodeId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Summary", b =>
                {
                    b.Property<int>("SummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SummaryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SummaryId"), 1L, 1);

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<string>("Summary1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("Summary")
                        .HasDefaultValueSql("(' ')");

                    b.HasKey("SummaryId");

                    b.HasIndex("NodeId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<string>("Client")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<DateTime>("CompletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('January 1, 1753')");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<int>("RequestNo")
                        .HasColumnType("int");

                    b.Property<string>("RequestSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<DateTime>("StartedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('January 1, 1753')");

                    b.Property<string>("WhereAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.HasKey("TaskId");

                    b.HasIndex("NodeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Tree", b =>
                {
                    b.Property<short>("TreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("TreeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TreeId"), 1L, 1);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.HasKey("TreeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Type", b =>
                {
                    b.Property<short>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TypeId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("(' ')");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("(' ')");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Attempt", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Task", "Task")
                        .WithMany("Attempts")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("Attempt_Task_fk");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Code", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Codes")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Code_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.HowTo", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("HowTos")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("HowTo_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Info", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Infos")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Info_Node_fk");

                    b.HasOne("HowTo_DBLibrary.Tree", "Tree")
                        .WithMany("Infos")
                        .HasForeignKey("TreeId")
                        .IsRequired()
                        .HasConstraintName("Info_Tree_fk");

                    b.HasOne("HowTo_DBLibrary.Type", "Type")
                        .WithMany("Infos")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Info_Type_fk");

                    b.Navigation("Node");

                    b.Navigation("Tree");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Key", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Keys")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Key_Node_fk");

                    b.HasOne("HowTo_DBLibrary.Tree", "Tree")
                        .WithMany("Keys")
                        .HasForeignKey("TreeId")
                        .IsRequired()
                        .HasConstraintName("Key_Tree_fk");

                    b.HasOne("HowTo_DBLibrary.Type", "Type")
                        .WithMany("Keys")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Key_Type_fk");

                    b.Navigation("Node");

                    b.Navigation("Tree");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Node", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Tree", "Tree")
                        .WithMany("Nodes")
                        .HasForeignKey("TreeId")
                        .IsRequired()
                        .HasConstraintName("Node_Tree_fk");

                    b.HasOne("HowTo_DBLibrary.Type", "Type")
                        .WithMany("Nodes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Node_Type_fk");

                    b.Navigation("Tree");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Note", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Note_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Observation", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Problem", "Problem")
                        .WithMany("Observations")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("Observation_Problem_fk");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Picture", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Pictures")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Picture_Node_fk");

                    b.HasOne("HowTo_DBLibrary.Type", "Type")
                        .WithMany("Pictures")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Picture_Type_fk");

                    b.Navigation("Node");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Problem", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Problems")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Problem_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Summary", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Summaries")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Summary_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Task", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("Task_Node_fk");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Tree", b =>
                {
                    b.HasOne("HowTo_DBLibrary.Type", "Type")
                        .WithMany("Trees")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Tree_Type_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Node", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("HowTos");

                    b.Navigation("Infos");

                    b.Navigation("Keys");

                    b.Navigation("Pictures");

                    b.Navigation("Problems");

                    b.Navigation("Summaries");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Problem", b =>
                {
                    b.Navigation("Observations");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Task", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Tree", b =>
                {
                    b.Navigation("Infos");

                    b.Navigation("Keys");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("HowTo_DBLibrary.Type", b =>
                {
                    b.Navigation("Infos");

                    b.Navigation("Keys");

                    b.Navigation("Nodes");

                    b.Navigation("Pictures");

                    b.Navigation("Trees");
                });
#pragma warning restore 612, 618
        }
    }
}
